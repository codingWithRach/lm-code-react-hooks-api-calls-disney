{"version":3,"sources":["context_providers/disney_context.tsx","components/header.tsx","components/navigation.tsx","components/character.tsx","components/character_container.tsx","components/current_page_layout.tsx","components/layout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DisneyContext","React","createContext","useDisneyContext","useContext","DisneyProvider","children","useState","showAll","setShowAll","currentPage","setCurrentPage","favourites","setFavourites","Provider","value","updateShowAll","updateCurrentPage","toggleFavouriteForCharacter","character","filter","favourite","_id","length","updatedFavourites","Header","className","Navigation","onClick","Character","imageSrc","imageUrl","posRevision","indexOf","substring","name","src","alt","CharacterContainer","characters","CharactersContext","useEffect","displayCharacters","buildRows","rows","cols","forEach","index","push","CurrentPageLayout","setCharacters","getCharacters","pageNumber","a","axios","get","apiResponse","data","Layout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20b78652.chunk.js","sourcesContent":["import React, { SetStateAction, useContext, useState } from \"react\";\r\nimport { DisneyCharacter } from \"../disney_character\";\r\n\r\ninterface IDisneyContext {\r\n  showAll: boolean;\r\n  updateShowAll: React.Dispatch<SetStateAction<boolean>>;\r\n  currentPage: number;\r\n  updateCurrentPage: React.Dispatch<SetStateAction<number>>;\r\n  favourites: Array<DisneyCharacter>;\r\n  toggleFavouriteForCharacter: (character: DisneyCharacter) => void;\r\n}\r\n\r\nconst DisneyContext = React.createContext<IDisneyContext>({} as IDisneyContext);\r\n\r\nexport function useDisneyContext(): IDisneyContext {\r\n  return useContext(DisneyContext);\r\n}\r\n\r\nconst DisneyProvider: React.FC<React.ReactNode> = ({ children }) => {\r\n  const [showAll, setShowAll] = useState<boolean>(true);\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n  const [favourites, setFavourites] = useState<Array<DisneyCharacter>>([]);\r\n\r\n  function toggleFavouriteForCharacter(character: DisneyCharacter) {\r\n    // if not already a favourite, add it\r\n    if (\r\n      favourites.filter((favourite) => favourite._id === character._id)\r\n        .length === 0\r\n    ) {\r\n      setFavourites([...favourites, character]);\r\n    }\r\n    // if already a favourite, remove it\r\n    else {\r\n      const updatedFavourites = favourites.filter(\r\n        (favourite) => favourite._id !== character._id\r\n      );\r\n      setFavourites([...updatedFavourites]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DisneyContext.Provider\r\n      value={{\r\n        showAll: showAll,\r\n        updateShowAll: setShowAll,\r\n        currentPage: currentPage,\r\n        updateCurrentPage: setCurrentPage,\r\n        favourites: favourites,\r\n        toggleFavouriteForCharacter: toggleFavouriteForCharacter,\r\n      }}\r\n    >\r\n      {children}\r\n    </DisneyContext.Provider>\r\n  );\r\n};\r\n\r\nexport default DisneyProvider;\r\n","import { useDisneyContext } from \"../context_providers/disney_context\";\r\n\r\nconst Header: React.FC = () => {\r\n  const currentPage = useDisneyContext().currentPage;\r\n  return (\r\n    <>\r\n      <header className=\"header__container\">\r\n        <h1 className=\"header__title\">The World of Disney</h1>\r\n        <p className=\"header__page-count \">Page: {currentPage}</p>\r\n      </header>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useDisneyContext } from \"../context_providers/disney_context\";\r\n\r\nconst Navigation: React.FC = () => {\r\n  const currentPage = useDisneyContext().currentPage;\r\n  const updateCurrentPage = useDisneyContext().updateCurrentPage;\r\n  const showAll = useDisneyContext().showAll;\r\n  const updateShowAll = useDisneyContext().updateShowAll;\r\n\r\n  const nextPage = () => {\r\n    if (showAll) {\r\n      updateCurrentPage(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  const showFavourites = () => {\r\n    updateCurrentPage(1);\r\n    if (showAll) {\r\n      updateShowAll(false);\r\n    } else {\r\n      updateShowAll(true);\r\n    }\r\n  };\r\n\r\n  const prevPage = () => {\r\n    if (currentPage > 1) {\r\n      updateCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"navigation\">\r\n      <div className=\"navigation__item\">\r\n        <button\r\n          className={\r\n            showAll ? \"navigation__button\" : \"navigation__button--hidden\"\r\n          }\r\n          onClick={prevPage}\r\n        >\r\n          Prev Page\r\n        </button>\r\n      </div>\r\n      <div className=\"navigation__item\">\r\n        <button className=\"navigation__button\" onClick={showFavourites}>\r\n          {showAll ? \"Show Favourites\" : \"Show All\"}\r\n        </button>\r\n      </div>\r\n      <div className=\"navigation__item\">\r\n        <button\r\n          className={\r\n            showAll ? \"navigation__button\" : \"navigation__button--hidden\"\r\n          }\r\n          onClick={nextPage}\r\n        >\r\n          Next Page\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import { useDisneyContext } from \"../context_providers/disney_context\";\r\nimport { DisneyCharacter } from \"../disney_character\";\r\n\r\ninterface CharacterProps {\r\n  character: DisneyCharacter;\r\n}\r\nconst Character: React.FC<CharacterProps> = ({ character }) => {\r\n  const favourites = useDisneyContext().favourites;\r\n  const toggleFavouriteForCharacter =\r\n    useDisneyContext().toggleFavouriteForCharacter;\r\n\r\n  // define default in case character doesn't have an image\r\n  let imageSrc = \"https://picsum.photos/300/200/?blur\";\r\n  if (character.imageUrl) {\r\n    // API sometimes includes extra path for images, so strip it off to fetch raw image\r\n    const posRevision = character.imageUrl.indexOf(\"/revision\");\r\n    imageSrc = character.imageUrl.substring(\r\n      0,\r\n      posRevision === -1 ? character.imageUrl.length : posRevision\r\n    );\r\n  }\r\n\r\n  return (\r\n    <article className=\"character-item\">\r\n      <h2>{character.name}</h2>\r\n\r\n      <div\r\n        className=\"character-item__actions\"\r\n        onClick={() => toggleFavouriteForCharacter(character)}\r\n      >\r\n        {favourites.filter((favourite) => favourite._id === character._id)\r\n          .length === 0\r\n          ? \"Add to Favourites\"\r\n          : \"Selected as Favourite\"}\r\n      </div>\r\n\r\n      <img\r\n        className=\"character-item__img\"\r\n        src={imageSrc}\r\n        alt={character.name}\r\n      />\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Character;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { DisneyCharacter } from \"../disney_character\";\r\nimport Character from \"./character\";\r\nimport { CharactersContext } from \"./current_page_layout\";\r\nimport { useDisneyContext } from \"../context_providers/disney_context\";\r\n\r\nconst CharacterContainer: React.FC<React.ReactNode> = () => {\r\n  let characters: Array<DisneyCharacter> = [...useContext(CharactersContext)];\r\n  const favourites: Array<DisneyCharacter> = useDisneyContext().favourites;\r\n  const showAll: boolean = useDisneyContext().showAll;\r\n  const updateShowAll = useDisneyContext().updateShowAll;\r\n  const currentPage: number = useDisneyContext().currentPage;\r\n  const updateCurrentPage = useDisneyContext().updateCurrentPage;\r\n\r\n  // if showing favourites and all favourites are removed, revert to showing all\r\n  useEffect(() => {\r\n    if (!showAll && favourites.length === 0) {\r\n      updateShowAll(true);\r\n    }\r\n  });\r\n\r\n  // select whether to display all characters or favourite characters\r\n  let displayCharacters: Array<DisneyCharacter> = [];\r\n  if (showAll) {\r\n    displayCharacters = [...characters];\r\n  } else {\r\n    displayCharacters = [...favourites];\r\n  }\r\n\r\n  // this function separates our array of DisneyCharacters into rows and columns\r\n  const buildRows = () => {\r\n    // we'll need arrays to store the rows and cols in, and they will be of type JSX.Element\r\n    let rows: Array<JSX.Element> = [],\r\n      cols: Array<JSX.Element> = [];\r\n\r\n    displayCharacters.forEach((character, index) => {\r\n      cols.push(<Character key={character._id} character={character} />);\r\n      if ((index + 1) % 5 === 0) {\r\n        rows.push(\r\n          <div className=\"character-row\" key={index}>\r\n            {cols}\r\n          </div>\r\n        );\r\n        cols = [];\r\n      }\r\n    });\r\n\r\n    // Final remaining columns\r\n    if (cols.length > 0) {\r\n      rows.push(\r\n        <div className=\"character-row\" key={displayCharacters.length}>\r\n          {cols}\r\n        </div>\r\n      );\r\n    }\r\n    return rows;\r\n  };\r\n\r\n  if (buildRows().length === 0 && currentPage > 1) {\r\n    updateCurrentPage(currentPage - 1);\r\n  }\r\n\r\n  return <div className=\"character-container\">{buildRows()}</div>;\r\n};\r\n\r\nexport default CharacterContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Header from \"./header\";\r\nimport Navigation from \"./navigation\";\r\nimport { DisneyCharacter } from \"../disney_character\";\r\nimport CharacterContainer from \"./character_container\";\r\nimport { useDisneyContext } from \"../context_providers/disney_context\";\r\n\r\nexport const CharactersContext = React.createContext<Array<DisneyCharacter>>(\r\n  []\r\n);\r\n\r\nconst CurrentPageLayout: React.FC = () => {\r\n  const currentPage = useDisneyContext().currentPage;\r\n  const showAll = useDisneyContext().showAll;\r\n  const [characters, setCharacters] = useState<Array<DisneyCharacter>>([]);\r\n\r\n  const getCharacters = async (pageNumber: number) => {\r\n    const apiResponse = await axios.get(\r\n      `http://api.disneyapi.dev/characters?page=${pageNumber}`\r\n    );\r\n    setCharacters(apiResponse.data.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCharacters(currentPage);\r\n  }, [currentPage, showAll]);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Navigation />\r\n      <CharactersContext.Provider value={characters}>\r\n        <CharacterContainer />\r\n      </CharactersContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrentPageLayout;\r\n","import React from \"react\";\r\nimport DisneyProvider from \"../context_providers/disney_context\";\r\nimport CurrentPageLayout from \"./current_page_layout\";\r\n\r\nconst Layout: React.FC = () => {\r\n  return (\r\n    <div className=\"page\">\r\n      <DisneyProvider>\r\n        <CurrentPageLayout />\r\n      </DisneyProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport Layout from \"./components/layout\";\r\n\r\nconst App: React.FC = () => (\r\n  <>\r\n    <Layout />\r\n  </>\r\n);\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}